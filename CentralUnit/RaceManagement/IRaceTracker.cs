// <copyright file="RaceTracker.cs" company="Moto Gymkhana">
//     Copyright (c) Moto Gymkhana. All rights reserved.
// </copyright>

using Models;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace RaceManagement
{
    public interface IRaceTracker
    {
        (RiderReadyEvent waiting, List<(RiderReadyEvent rider, TimingEvent timer)> onTrack, List<TimingEvent> unmatchedTimes) GetState { get; }
        List<Lap> Laps { get; }
        List<Rider> Riders { get; }
        Dictionary<Guid, List<PenaltyEvent>> PendingPenalties { get; }

        event EventHandler<LapCompletedEventArgs> OnRiderDNF;
        event EventHandler<LapCompletedEventArgs> OnRiderMatched;
        event EventHandler<WaitingRiderEventArgs> OnRiderWaiting;
        event EventHandler OnStartEmpty;

        Task<RaceSummary> Run(CancellationToken token);
        void AddRider(Rider rider);
        void RemoveRider(Guid Id);
        Rider GetRiderById(Guid id);
        void ChangePosition(Guid id, int targetPosition);

        /// <summary>
        /// Add events generated by users like penalties
        /// </summary>
        /// <param name="raceEvent"></param>
        void AddEvent<T>(T raceEvent) where T : EventArgs;
    }
}